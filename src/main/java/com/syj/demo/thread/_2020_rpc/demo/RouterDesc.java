package com.syj.demo.thread._2020_rpc.demo;

/**
 * Created by Administrator on 2020/7/5.
 */
public class RouterDesc {

    /**
     * 服务消费者和提供者和注册中心（比如zookeepr)建立链路连接，服务提供者将需要发布的服务写入到注册中心，服务
     * 消费者通过别名等信息从注册中心拉取服务提供者地址列表，并缓存在本地。
     *
     * 由于消费者可能优先于提供者启动，或者运行过程中增加新的服务提供者，或服务提供者宕机退出，就会导致注册中心
     * 服务提供者地址列表发生变化。注册中心检测到服务提供者列表发生变化后，会将变更内容主动推送给消费者，消费者
     * 更新本地的缓存列表。
     *
     * 当注册中心全部宕机后，消费者仍能通过本地缓存的服务提供者列表，跟服务提供者进行通讯，只是影响到了新服务的
     * 注册和老服务的下线。
     *
     * 负载均衡（路由）策略是服务的重要属性，分布式服务框架会提供多种负载均衡策略，同时支持用户扩展负载均衡策略，
     * 常见的有：
     * 1.随机路路由
     *
     * 2.轮询：按照权重，顺序循环遍历服务提供者列表，达到上限后重新归零，集训顺序循环。比如设置1:3:5的权重值，
     *   则按照1/3/5这样的概率去轮询
     *
     * 3.服务调用时延：服务消费者记录周期内所有服务提供者的调用时延，并计算出整体的平均调用时延。然后计算每个
     *   服务提供者的调用时延跟整体平均时延的差值，并“根据差值动态调整权重”。保证差值大的服务提供者接收更少的消息，
     *   进而减少服务调用时延的震荡范围。
     *
     * 4.一致性哈希：相同参数的请求总是发送到同一个服务提供者，当某一台提供者宕机后，原本发放该提供者的请求，基于
     *   虚拟节点，平摊到其他提供者（节点数不能变）。
     *
     * 5.粘滞链接：通常用于有状态的服务，尽可能让客户端总是指向同一个提供者，除非服务提供者宕机，再链接另一台。
     *   由于服务通常被强烈建议设计成无状态的，所以粘滞链接在实际项目中很少用。
     *
     * 6.injvm模式：在某些业务场景中，本地jvm内部也发布了需要消费的服务。这种场景下，从性能和可靠性角度考虑，
     *   需要优先调用本地jvm
     *
     * 跨机房调用
     * 缺点：增加调用时延、网络故障概率变大
     * 优点：当某个机房发生大面积宕机或者服务提供者无法正常工作时，跨机房访问其他正常访问，防止某个机房故障导致
     *      业务中断
     * @param args
     */
    public static void main(String[] args) {

    }
}

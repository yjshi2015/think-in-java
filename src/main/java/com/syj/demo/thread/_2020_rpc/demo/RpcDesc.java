package com.syj.demo.thread._2020_rpc.demo;

/**
 * Created by Administrator on 2020/7/1.
 */
public class RpcDesc {

    /**
     * 尽管不同的分布式服务框架实现细节存在差异，功能特性也不尽相同，但是一些公共能力是必须要具备的，以下是对分布式服务
     * 框架的功能特性总结
     *
     * 1.服务发布、订阅：
     *   整个过程是透明化的，对于消费者而言，服务实时自动发现，由注册中心推送服务地址；对于服务提供者而言，
     *   支持动态注册新服务，也支持动态取消某个服务的注册
     *
     * 2.服务路由：
     *   默认提供随机路由、轮询路由和权重路由策略等。也有粘滞链接，即总是向同一个提供方发起请求，除非此提供方挂掉，
     *   才会切换到另一台服务。
     *
     * 3.集群容错：
     *   FailOver：失败转移（失败自动切换），当出现失败，重试其他服务器，通常用于读操作或者幂等性写操作；
     *   FailFast：快速失败，只发起一次调用，失败立即报错，通常用于非幂等性写操作；
     *   FailBack：失败自动恢复，后台记录失败请求，定时重发，通常用于消息通知操作；
     *
     * 4.服务调用：
     *   同步调用：消费者发起服务调用后，同步阻塞等待服务端响应
     *   异步调用：消费者发起服务调用之后，不阻塞立即返回，由服务端返回应答后，异步通知消费者；
     *   并行调用：消费者同时对多个服务提供者发起批量调用请求，集中等待应答
     *
     * 5.序列化方式
     *   二进制类序列化：支持Thrift、Protocol Buffer等二进制协议，提升序列化性能
     *   文本类序列化：支持Json、xml等文本类型的序列化方式，提升通用性和可读性
     *
     * 应用服务化后，由原来的本地API调用变成“跨进程远程服务”调用，“网络通信”、“消息序列化、反序列化”、“反射调用”和
     * “动态代理”都会导致性能损耗、延时增加。因此分布式服务框架的性能指标特别重要。
     *
     * 应用由淡季调用演进到分布式部署之后，由于网络故障、服务提供者故障等因素，会导致业务失败率增加，分布式服务需要
     * 具备很强的可靠性，来保证业务的成功率，可靠性总结如下：
     *
     * 1.服务注册中心：
     *   服务健康状态检查：注册中心通过“心跳”检测服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者
     *   故障切换：注册中心对等集群部署，任意一台宕机后，将自动切换到另一台
     *   高HA：注册中心全部宕机后，服务提供者和服务消费者仍能通过本地缓存通信
     *
     */
}

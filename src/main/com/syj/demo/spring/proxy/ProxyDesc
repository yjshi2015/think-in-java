# 一、AOP术语
## 1. 连接点(Joinpoint)
是指程序执行的某个特定位置，比如方法调用前/调用后、方法抛出异常后
## 2. 切点(Pointcut)
每个程序都有很多连接点(Jointpoint)，比如一个拥有2个方法的类，这些方法都是连接点。AOP是通过切点定位特定的连接点。借助数据库查询的场景来理解连接点和切点的概念是再合适不过的了：连接点相当于数据库中的记录，切点相当于查询条件。
## 3. 增强(Advice)
增强是织入目标类的一段程序代码
## 4. 织入(Weaving)
织入是将增强添加到目标类的具体连接点的过程。根据不同的实现技术，AOP有3中织入方式
- 编译期织入，这要求使用特殊的Java编译器。
- 类装载期织入，这要求使用特殊的类装载器。
- 动态代理织入，在运行期为目标类添加增强生成子类的方式。
Spring采用动态代理织入，而AspectJ采用编译期织入和类装载期织入。
## 5. 代理(Proxy)
一个类被AOP织入增强后，就产生了一个结果类，它是融合了原类和增强逻辑的代理类

# 二、AOP的实现者

## 1. AspectJ
在编译期提供横切代码的织入
## 2. Spring AOP
使用**动态代理**技术在**运行期**织入增强的代码，它有两种代理机制:
- 基于JDK的动态代理,在运行期创建接口的代理实例;
- 基于CGLib的动态代理,采用底层的字节码技术,创建一个类的子类;